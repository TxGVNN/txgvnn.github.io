<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MẤY KHI MẤY KHỈ</title>
    <link>/</link>
    <description>Recent content on MẤY KHI MẤY KHỈ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi-vn</language>
    <lastBuildDate>Tue, 18 Jul 2023 23:20:25 +0700</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quản lý tasks trong project</title>
      <link>/post/project-tasks/</link>
      <pubDate>Tue, 18 Jul 2023 23:20:25 +0700</pubDate>
      
      <guid>/post/project-tasks/</guid>
      <description>Bài toán  Trong quá trình làm việc với các project, chúng ta thường phải build, chạy, rồi test, rồi debug, đủ thể loại thao tác/tương tác cần phải làm. Với mỗi project khác nhau thì các công việc này cũng hoàn toàn khác nhau.
Trưóc khi nghĩ cách    Nhớ lại quá khứ từng làm như nào, rồi làm lại
  Đọc docs xem làm như nào</description>
    </item>
    
    <item>
      <title>Dtach</title>
      <link>/post/dtach/</link>
      <pubDate>Sat, 08 Jul 2023 11:50:22 +0700</pubDate>
      
      <guid>/post/dtach/</guid>
      <description>Trực chỉ nhân tâm - Đi thẳng vô vấn đề    Nhớ năm xưa, khi còn vọc i3 khá nhiều, còn thường restart luôn cả window manager. Mình hay bị lost các terminal đang chạy các process cần thiết.
  Đi làm để máy bật ở công ty qua đêm, về nhà thì cần ssh vô máy ở công ty, cần connect lại các process đang chạy trên terminal (Case này thì dùng vnc cũng được, nhưng mình thích terminal hơn nhiều)</description>
    </item>
    
    <item>
      <title>Quản lý cấu hình Emacs với Guix</title>
      <link>/post/quan-ly-cau-hinh-emacs-voi-guix/</link>
      <pubDate>Sun, 12 Feb 2023 02:51:36 +0000</pubDate>
      
      <guid>/post/quan-ly-cau-hinh-emacs-voi-guix/</guid>
      <description>Lý do  Emacs hay Vim thì tính cá nhân hoá rất cao. Để cá nhân hoá cao thì mình phải có bộ config của riêng mình. Ngoài các config về cài đặt thì mình có thể sửa đổi (patch) các package cho vừa ý mình. Vì thế mà mình sẽ phải maintain các bản sửa đổi.
  Các ý tưởng  Git luôn .emacs.d/elpa  Tức mình có thể dùng package.</description>
    </item>
    
    <item>
      <title>Quản lý issues bằng diff</title>
      <link>/post/quan-ly-issue-bang-diff/</link>
      <pubDate>Sat, 31 Dec 2022 23:25:21 +0700</pubDate>
      
      <guid>/post/quan-ly-issue-bang-diff/</guid>
      <description>Lý do  Hiện tại mình đang làm việc trên Github/issues. Vì các issue được tạo và cập nhật liên tục bởi mọi người, nên việc theo dõi khá khó khăn và mất thời gian.
 Vì quen làm việc với diff, nên mình muốn đưa về text và dùng diff để view/review issue một cách hiểu quả.
  Triển khai  Emacs  Vì dùng trên emacs, nên mình có gói forge để kéo issues về thành text, chỉ cần việc lưu lại các issue này thành các file text.</description>
    </item>
    
    <item>
      <title>Báo cháy với org-alert</title>
      <link>/post/org-alert/</link>
      <pubDate>Sat, 08 Oct 2022 11:30:51 +0700</pubDate>
      
      <guid>/post/org-alert/</guid>
      <description>Cháy này là DEADLINE đó   Trong bài trưóc mình đã viết về sử dụng Org-mode để quản lý công việc Thì ngoài việc tự tay check các task hàng ngày, thì chúng ta có thể sử dụng thêm tính năng alert
  Vào việc luôn  (use-package org-alert :ensure t :config (setq org-alert-interval 900 ;; 15phút báo cháy 1 lần alert-default-style &amp;#39;libnotify ;; mình sử dụng libnotify để bắn alert ra thẳng màn hình org-alert-match-string ;; Đoạn này mình có sửa thành DEADLINE &amp;lt; tomorrow.</description>
    </item>
    
    <item>
      <title>Literate Devops với Emacs</title>
      <link>/post/literate_devops_with_emacs/</link>
      <pubDate>Fri, 04 Mar 2022 07:27:19 +0000</pubDate>
      
      <guid>/post/literate_devops_with_emacs/</guid>
      <description>Ví dụ như video này đây youtube.com/Literate Devops with Emacs
 Hiểu đơn giản là giờ chúng ta cần everything as code, cần reproducible, tăng khả năng stateless (hãy như Guix)
Sử dụng org-babel  Với org-babel thì các đoạn code sẽ được viết trong cặp #+BEGIN_SRC NGÔN-NGỮ-THỰC-THI và #+END_SRC với các option như thực thi ở thư mục nào :dir,…
 Các ví dụ mình dùng.
Cài cắm các tool cần thiết cho máy mình  *Build PC ** Setup emacs #+BEGIN_SRC compilesudo apt-get update sudo apt-get install -y emacs-nox # Setup dotfiles curl https://txgvnn.</description>
    </item>
    
    <item>
      <title>Dev enviroment as code</title>
      <link>/post/dev-env-as-code/</link>
      <pubDate>Fri, 10 Dec 2021 04:32:02 +0000</pubDate>
      
      <guid>/post/dev-env-as-code/</guid>
      <description>Giới thiệu   Gitpod.io đề cập về khái niệm dev-env-as-code, nghe cũng quá là hợp lý. Github thì có Codespaces (mình chưa thử). Về cái ý tưởng này thì trưóc đây đã có vài bên làm như cloud9 hay koding gì gì đó. Hay là google cloudshell mình vẫn sử dụng suốt (chém).
 Trong bài này mình sẽ nói về gitpod. Vì nó miễn phí 50h/1 tháng thoải mái mà vọc và dùng thử (thật!</description>
    </item>
    
    <item>
      <title>GNU Guix system, hệ thống của tương lai (thời đại 4.0.4)</title>
      <link>/post/gnu-guix-os/</link>
      <pubDate>Sat, 18 Sep 2021 09:12:56 +0700</pubDate>
      
      <guid>/post/gnu-guix-os/</guid>
      <description>Mình nghĩ GNU Guix sẽ là hệ thống chủ chốt trong tương lai, thống trị trên mọi mặt trận. GNU đã tạo nhiều Linux distros dựa trên nhiều distro khác từ nhưng GNU Guix là một kiến trúc khác hẳn.
 GNU Guix là 1 trình quản lý gói như apt, yum, pacman trên các OS khác. Khi nhắc đến hệ điều hành GNU Guix thì tức hệ điều hành đó sẽ sử dụng GNU Guix làm trình quản lý chính, cùng GNU Shepherd làm init system (mình nghĩ thế, sai thì thôi).</description>
    </item>
    
    <item>
      <title>Vài link để bắt đầu với Emacs</title>
      <link>/post/bat-dau-voi-emacs/</link>
      <pubDate>Sun, 22 Aug 2021 21:21:12 +0700</pubDate>
      
      <guid>/post/bat-dau-voi-emacs/</guid>
      <description>Hôm nay người bạn hữu của mình xin mình vài link để học emacs. Nên mình xem nên bắt đầu từ đâu là hay ho, cảm hứng nhất. Chứ nếu bạn cài emacs và bật default lên có thể bạn sẽ chán ngay.
 Nên mình đưa ra một vài resource để bắt đầu cũng như theo dõi Emacs
Web (có thể dùng M-x eww)    https://tuhdo.</description>
    </item>
    
    <item>
      <title>Build bàn phím công thái học (ergo)</title>
      <link>/post/ergo-keyboard/</link>
      <pubDate>Sun, 01 Aug 2021 08:26:07 +0700</pubDate>
      
      <guid>/post/ergo-keyboard/</guid>
      <description>Lý do  1. Nếu làm việc nhiều, ngón tay út bắt đầu mỏi và đau do bấm phím Ctrl quá nhiều lần (do Emacs đó)   Vì thế mà mình muốn 1 cái bàn phím có thể map được phím thoải mái, mình sẽ di chuyển ngay phím Ctrl về ngón cái
 Thực ra có 1 số giải phát thay thế như dùng vi-keybinding (mình không thích, phải thêm config cho emacs nữa), đảo phím Ctrl lên Capslock (cũng được) nhưng khá khó chịu cho những tổ hợp C-z, C-x</description>
    </item>
    
    <item>
      <title>Phạm vi directory trong Emacs</title>
      <link>/post/pham-vi-directory-trong-emacs/</link>
      <pubDate>Mon, 22 Mar 2021 22:46:38 +0700</pubDate>
      
      <guid>/post/pham-vi-directory-trong-emacs/</guid>
      <description>Sơ lược về cách Emacs làm việc với buffer/file  Buffer nói 1 cách dễ hiểu là 1 tệp ảo (không cần)/(chưa được)/(đã được) lưu thành 1 tệp. Đối tượng mà emacs làm việc là buffer. Khi mở 1 file trong emacs, emacs sẽ mở file đó vào 1 buffer cùng tên hoặc tên sẽ được đi kèm với thư mục cha khác nhau để phân biệt nếu mở file trùng tên.</description>
    </item>
    
    <item>
      <title>Viết ghi chú mỗi ngày làm việc</title>
      <link>/post/vo-ghi-chung/</link>
      <pubDate>Sun, 07 Mar 2021 15:07:16 +0700</pubDate>
      
      <guid>/post/vo-ghi-chung/</guid>
      <description>Khi còn là sinh viên mình cũng vọc vạch kha khá, kinh nghiệm đọng lại rồi cũng rơi dần nếu không dùng lại, ngay cả những cái đơn giản nhất. Mình bắt đầu suy nghĩ về việc viết note như là mình hồi xưa đi học để lại các kiến thức trong vở. (Nhưng vở thì mình cũng vứt lâu rồi)
 Thế là mình bắt đầu làm nó bài bản hơn.</description>
    </item>
    
    <item>
      <title>Sử dụng TODO list để quản lý công việc</title>
      <link>/post/su-dung-todo-list-de-quan-ly-cong-viec/</link>
      <pubDate>Sun, 07 Mar 2021 14:08:36 +0700</pubDate>
      
      <guid>/post/su-dung-todo-list-de-quan-ly-cong-viec/</guid>
      <description>Công cụ   org-mode là 1 package nổi tiếng trong Emacs. Và có rất nhiều người dùng Emacs chỉ vì org-mode thôi
 Cách sử dụng như nào bạn có thể xem ở trang chủ của Org-mode
  Cách mình dùng   Mình viết các file org ở các vị trí khác nhau, và sử dụng org-agenda để hiển thị toàn bộ chúng như 1 bức tranh toàn cảnh.</description>
    </item>
    
    <item>
      <title>Implement tính năng kill/yank trong Emacs vào I3WM</title>
      <link>/post/clipmenu/</link>
      <pubDate>Thu, 11 Feb 2021 23:10:28 +0700</pubDate>
      
      <guid>/post/clipmenu/</guid>
      <description>Lý do   Khoảng ngày &amp;lt;2021-02-11 Thu&amp;gt; sau khi được 1 bạn suggest về cái ~/.i3/bin/x-register tổt hơn TxGVNN/i3-config#5. Mình mới nghĩ về việc tìm kiếm 1 chương trình quản lý clipboard mà mình có thể yank rồi chọn item để paste nhưng sử dụng dmenu. Như tính năng yank trong Emacs.
 Mấy năm truớc mình đã từng thấy 1 người bạn sử dụng chương trình nào đó để show toàn bộ history cuả clipboard và chọn ra để paste.</description>
    </item>
    
    <item>
      <title>Lời giới thiệu o.O</title>
      <link>/post/intro/</link>
      <pubDate>Thu, 11 Feb 2021 23:00:48 +0700</pubDate>
      
      <guid>/post/intro/</guid>
      <description>Sao lại bây giờ mới viết?   Truớc đây mình đã muốn xây dựng debian-vn.github.io để cho cộng đồng Debian tại VN, chứ không muốn viết blog cá nhân. Vì mình nghĩ build cộng đồng nó sẽ tồn tại lâu hơn là cá nhân. Thực ra page đó cũng có mỗi mình viết :joy: Tóm lại không đủ nhiệt huyết để làm nữa :sad:
 Nhưng vẫn nhiệt tình trao đổi/chia sẻ cho anh em đồng nghiệp ở công ty, nhóm nhỏ.</description>
    </item>
    
  </channel>
</rss>
